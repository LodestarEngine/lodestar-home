<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on</title><link>https://ldstr.dev/docs/concepts/</link><description>Recent content in Concepts on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 01 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ldstr.dev/docs/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Features</title><link>https://ldstr.dev/docs/concepts/features/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://ldstr.dev/docs/concepts/features/</guid><description>Automatic resolution of circular data-dependencies (algebraic loops). Transparent compile-time error checking, as well as run-time checks prior to executing code. Easy extensibility with a simple yet powerful Block API based on template metaprogramming. Clean C++ code generation with predetermined function execution order, as well as resolved data-dependencies. Zero-overhead abstraction using templated classes; it does not matter if you have a thousand inputs, or just one. Out-of-the-box networking support, with efficient serialization.</description></item><item><title>Rationale</title><link>https://ldstr.dev/docs/concepts/rationale/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://ldstr.dev/docs/concepts/rationale/</guid><description>The greatest driver behind this project is the lack of a fast and accessible library for applying control theoretic concepts on real-life (embedded) systems. While platforms such as ROS1 are popular in robotics, people working with applications that require real-time viable code and thread safety are often compelled to write their own solutions, with propiertary implementations being the norm, and a single unified solution is left to be desired.
With this in mind, I set out to develop a unified and approachable control library, with the explicit intention to make it as real-time viable as possible while maintaining code transparency and providing a flexible API2.</description></item></channel></rss>